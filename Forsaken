-- Atualmente Open-Source!
-- Permitido: Adotar algumas funções em seu script , verificar se é seguro
-- Não permitido: Copiar o script totalmente , Recriar com KeySystem
-- Aproveite :)

loadstring(game:HttpGet("https://raw.githubusercontent.com/XScommunity/skibidi/refs/heads/main/sahur"))()

local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

WindUI:Popup({
    Title = "XXMZ HUB v2.0",
    Content = "Hub convertido para WindUI. Caso encontre erros, entre em nosso discord e avise.",
    Buttons = {
        {
            Title = "Discord",
            Callback = function()
                setclipboard("https://discord.gg/YXJ2xaEwP2")
                WindUI:Notify({
                    Title = "Convite copiado",
                    Content = "O convite foi copiado para sua área de transferência!",
                    Duration = 3,
                    Icon = "message-circle",
                })
            end
        },
        {
            Title = "Fechar",
            Callback = function()
                print("Popup fechado")
            end
        }
    }
})

local Window = WindUI:CreateWindow({
    Title = "☑️ XXMZ HUB | Forsaken",
    Icon = "door-open", -- lucide icon
    Author = "discord.gg/YXJ2xaEwP2",
    Folder = "XXMZHUBFORSAKEN",
    
    Size = UDim2.fromOffset(600, 480),
    MinSize = Vector2.new(580, 370),
    MaxSize = Vector2.new(900, 600),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = false,
    ScrollBarEnabled = true,
    Background = "rbxassetid://106924593304955",

        -- ↓ Optional. You can remove it.
    --[[ You can set 'rbxassetid://' or video to Background.
        'rbxassetid://106924593304955':
            Background = "rbxassetid://", -- rbxassetid
        Video:
            Background = "video:YOUR-RAW-LINK-TO-VIDEO.webm", -- video 
    --]]
    
    
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        end,
    },

    KeySystem = { 
        Key = { "xxmz25" },
        Note = "Resgate a key em nosso discord .gg/YXJ2xaEwP2",
        Thumbnail = {
            Image = "rbxassetid://89646996763231",
            Title = "XXMZ Hub",
        },
        URL = "https://discord.gg/YXJ2xaEwP2",
        SaveKey = true,
    },
})

-- =============================
-- MAIN TAB
-- =============================
local MainTab = Window:Tab({
    Title = "Principal",
    Icon = "house",
    Locked = false,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local killAllToggle = false
local killAllConnection = nil

local function getRandomSurvivor()
    local survivorsFolder = Workspace:FindFirstChild("Players") and Workspace.Players:FindFirstChild("Survivors")
    if not survivorsFolder then
        return nil
    end
    local survivors = survivorsFolder:GetChildren()
    if #survivors == 0 then
        return nil
    end
    return survivors[math.random(1, #survivors)]
end

local function startKillAll()
    local RunService = game:GetService("RunService")
    local currentSurvivor = getRandomSurvivor()
    
    killAllConnection = RunService.Heartbeat:Connect(function()
        if not killAllToggle then return end
        
        -- Verifica se o Survivor atual é válido
        if not currentSurvivor or not currentSurvivor.Parent or not currentSurvivor:FindFirstChild("HumanoidRootPart") then
            currentSurvivor = getRandomSurvivor()
            if not currentSurvivor then
                WindUI:Notify({
                    Title = "Kill All (Killer)",
                    Content = "Nenhum Survivor encontrado!",
                    Duration = 3,
                    Icon = "alert-triangle",
                })
                return
            end
        end
        
        -- Teleporta atrás do Survivor
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local survivorHRP = currentSurvivor:FindFirstChild("HumanoidRootPart")
            if survivorHRP then
                local offset = CFrame.new(-3, 0, 0) -- 3 studs atrás
                character.HumanoidRootPart.CFrame = survivorHRP.CFrame * offset
            end
        end
        
        -- Spamma o RemoteEvent
        local success, remoteEvent = pcall(function()
            return ReplicatedStorage:WaitForChild("Modules", 5):WaitForChild("Network", 5):WaitForChild("RemoteEvent", 5)
        end)
        if success and remoteEvent then
            local args = {
                "UseActorAbility",
                {
                    "Slash"
                }
            }
            remoteEvent:FireServer(unpack(args))
        end
    end)
end

local function stopKillAll()
    if killAllConnection then
        killAllConnection:Disconnect()
        killAllConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill All (Killer)",
    Desc = "Teleporta atrás de Survivors e spamma ataque",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        killAllToggle = state
        if state then
            local survivorsFolder = Workspace:FindFirstChild("Players") and Workspace.Players:FindFirstChild("Survivors")
            if not survivorsFolder or #survivorsFolder:GetChildren() == 0 then
                WindUI:Notify({
                    Title = "Kill All (Killer)",
                    Content = "Nenhum Survivor encontrado!",
                    Duration = 3,
                    Icon = "alert-triangle",
                })
                killAllToggle = false
                return
            end
            startKillAll()
            WindUI:Notify({
                Title = "Kill All (Killer)",
                Content = "Kill All ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillAll()
            WindUI:Notify({
                Title = "Kill All (Killer)",
                Content = "Kill All desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Função pra coletar emotes de Purchased.Emotes
local function getEmoteList()
    local playerData = LocalPlayer:WaitForChild("PlayerData")
    local purchasedEmotes = playerData:WaitForChild("Purchased"):WaitForChild("Emotes")
    local emoteList = {}
    
    for _, emote in pairs(purchasedEmotes:GetChildren()) do
        table.insert(emoteList, emote.Name)
    end
    
    return emoteList
end

-- Dropdown pra selecionar um único emote
local Dropdown = MainTab:Dropdown({
    Title = "Emote as Killer",
    Values = getEmoteList(),
    Value = nil, -- Começa sem seleção
    Multi = false, -- Permite apenas um emote
    AllowNone = true,
    Callback = function(option)
        print("Emote selecionado: " .. (option or "Nenhum"))
    end
})

-- Botão pra começar a dança
local DanceButton = MainTab:Button({
    Title = "Dançar Emote",
    Desc = "Toca o emote selecionado",
    Locked = false,
    Callback = function()
        local selectedEmote = Dropdown.Value -- Pega o emote selecionado
        if selectedEmote then
            local args = {
                "PlayEmote",
                {
                    buffer.fromstring("\"Animations\""),
                    buffer.fromstring("\"" .. selectedEmote .. "\"")
                }
            }
            local remoteEvent = ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent")
            remoteEvent:FireServer(unpack(args))
            print("Tocando emote: " .. selectedEmote)
        else
            warn("Nenhum emote selecionado!")
        end
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Button = MainTab:Button({
    Title = "Todos emotes equipados",
    Desc = "Quebra o limite de minimo de emotes equipados",
    Locked = false,
    Callback = function()
        local playerData = LocalPlayer:WaitForChild("PlayerData")
        local purchasedEmotes = playerData:WaitForChild("Purchased"):WaitForChild("Emotes")
        local equippedEmotes = playerData:WaitForChild("Equipped"):WaitForChild("Emotes")
        
        -- Junta todos os nomes dos emotes em uma string com "|"
        local emoteList = {}
        for _, emote in pairs(purchasedEmotes:GetChildren()) do
            table.insert(emoteList, emote.Name)
        end
        local emoteString = table.concat(emoteList, "|")
        
        -- Modifica o StringValue "Emotes" em Equipped.Emotes
        local emoteValue = equippedEmotes
        if emoteValue and emoteValue:IsA("StringValue") and emoteValue.Name == "Emotes" then
            emoteValue.Value = emoteString
        else
            warn("StringValue 'Emotes' não encontrado ou não é um StringValue em Equipped.Emotes!")
        end
    end
})

-- Show Chat Toggle
local Toggle = MainTab:Toggle({
    Title = "Show Chat",
    Desc = "Mantém o chat sempre visível",
    Icon = "message-circle",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        _G.showChat = value
        if value then
            task.spawn(function()
                while _G.showChat and task.wait() do
                    pcall(function()
                        local textChatService = game:GetService("TextChatService")
                        local chatConfig = textChatService:FindFirstChildOfClass("ChatWindowConfiguration")
                        if chatConfig then
                            chatConfig.Enabled = true
                        end
                    end)
                end
            end)
            WindUI:Notify({
                Title = "Show Chat",
                Content = "Chat sempre visível ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            _G.showChat = false
            pcall(function()
                local localPlayer = game.Players.LocalPlayer
                if workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Spectating") then
                    if not workspace.Players.Spectating:FindFirstChild(localPlayer.Name) then
                        local textChatService = game:GetService("TextChatService")
                        local chatConfig = textChatService:FindFirstChildOfClass("ChatWindowConfiguration")
                        if chatConfig then
                            chatConfig.Enabled = false
                        end
                    end
                end
            end)
            WindUI:Notify({
                Title = "Show Chat",
                Content = "Show Chat desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- Bring Items Toggle
local bringItemsToggle = false
local bringItemsConnection = nil

local function startBringItems()
    local RunService = game:GetService("RunService")
    bringItemsConnection = RunService.Heartbeat:Connect(function()
        if bringItemsToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3549, 18, 254))
            end
            wait(0.05)
        end
    end)
end

local function stopBringItems()
    if bringItemsConnection then
        bringItemsConnection:Disconnect()
        bringItemsConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Bring Items",
    Desc = "Teleporte contínuo para pegar itens",
    Icon = "package",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        bringItemsToggle = value
        if value then
            startBringItems()
            WindUI:Notify({
                Title = "Bring Items",
                Content = "Teleporte contínuo ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopBringItems()
            WindUI:Notify({
                Title = "Bring Items",
                Content = "Teleporte contínuo desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- Kill Carl Toggle
local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3610, 12, 255))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill Carl",
    Desc = "Teleporte contínuo para matar Carl",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill Carl",
                Content = "Teleporte para Carl ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill Carl",
                Content = "Kill Carl desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3527, 12, 278))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill Roland",
    Desc = "Teleporte contínuo para matar Roland",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill Carl",
                Content = "Teleporte para Carl ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill Carl",
                Content = "Kill Carl desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3549, 12, 217))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill Brandon",
    Desc = "Teleporte contínuo para matar Brandon",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill Brandon",
                Content = "Teleporte para Brandon ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill Carl",
                Content = "Kill Carl desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3613, 32, 229))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill TV GUY",
    Desc = "Teleporte contínuo para matar Brandon",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill TV GUY",
                Content = "Teleporte para TV GUY ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill TV GUY",
                Content = "Kill TV GUY desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3650, 15, 219))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill TV GUY 2",
    Desc = "Teleporte contínuo para matar Brandon",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill TV GUY",
                Content = "Teleporte para TV GUY ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill TV GUY 2",
                Content = "Kill TV GUY 2 desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

local killCarlToggle = false
local killCarlConnection = nil

local function startKillCarl()
    local RunService = game:GetService("RunService")
    killCarlConnection = RunService.Heartbeat:Connect(function()
        if killCarlToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3574, 13, 270))
            end
            wait(0.05)
        end
    end)
end

local function stopKillCarl()
    if killCarlConnection then
        killCarlConnection:Disconnect()
        killCarlConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill TV MAN",
    Desc = "Teleporte contínuo para matar TV MAN",
    Icon = "skull",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killCarlToggle = value
        if value then
            startKillCarl()
            WindUI:Notify({
                Title = "Kill TV MAN",
                Content = "Teleporte para TV GUY ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillCarl()
            WindUI:Notify({
                Title = "Kill TV MAN",
                Content = "Kill TV MAN desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- Kill Rager Toggle
local killRagerToggle = false
local killRagerConnection = nil

local function startKillRager()
    local RunService = game:GetService("RunService")
    killRagerConnection = RunService.Heartbeat:Connect(function()
        if killRagerToggle then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3646, 12, 255))
            end
            wait(0.05)
        end
    end)
end

local function stopKillRager()
    if killRagerConnection then
        killRagerConnection:Disconnect()
        killRagerConnection = nil
    end
end

local Toggle = MainTab:Toggle({
    Title = "Kill Rager",
    Desc = "Teleporte contínuo para matar Rager",
    Icon = "zap",
    Type = "Checkbox",
    Default = false,
    Callback = function(value)
        killRagerToggle = value
        if value then
            startKillRager()
            WindUI:Notify({
                Title = "Kill Rager",
                Content = "Teleporte para Rager ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            stopKillRager()
            WindUI:Notify({
                Title = "Kill Rager",
                Content = "Kill Rager desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- Auto Complete Generator
local Toggle = MainTab:Toggle({
    Title = "Auto Complete Generator",
    Desc = "Completa geradores automaticamente",
    Icon = "zap",
    Type = "Checkbox",
    Default = false,
    Callback = function(bool)
        _G.instantGenerator = bool
        if bool then
            task.spawn(function()
                while _G.instantGenerator do
                    local map = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Ingame") and workspace.Map.Ingame:FindFirstChild("Map")
                    if map then
                        for _, gen in pairs(map:GetChildren()) do
                            if gen:IsA("Model") and gen.Name == "Generator" then
                                local re = gen:FindFirstChild("Remotes") and gen.Remotes:FindFirstChild("RE")
                                if re then
                                    re:FireServer()
                                end
                            end
                        end
                    end
                    task.wait(2.5)
                end
            end)
        end
    end
})

-- Reach Expander
local function getHitboxesFromPlayer()
    local hitboxes = workspace:FindFirstChild("Hitboxes")
    if hitboxes then
        for _, v in pairs(hitboxes:GetChildren()) do
            if string.find(v.Name, game.Players.LocalPlayer.Name) then
                return true
            end
        end
    end
    return false
end

local Toggle = MainTab:Toggle({
    Title = "Reach Expander",
    Desc = "Aumenta seu alcance",
    Icon = "maximize",
    Type = "Checkbox",
    Default = false,
    Callback = function(bool)
        _G.hitboxExpander = bool
        if bool then
            WindUI:Notify({
                Title = "Reach Expander",
                Content = "Reach Expander ativado!",
                Duration = 3,
                Icon = "check",
            })
        else
            WindUI:Notify({
                Title = "Reach Expander",
                Content = "Reach Expander desativado!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- Sistema do Reach Expander executando em loop separado
task.spawn(function()
    while true do
        if _G.hitboxExpander and getHitboxesFromPlayer() then
            local localPlayer = game.Players.LocalPlayer
            local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local currentVelocity = hrp.Velocity
                hrp.AssemblyLinearVelocity = hrp.CFrame.LookVector * 250
                game:GetService("RunService").RenderStepped:Wait()
                hrp.Velocity = currentVelocity 
            end
        end
        task.wait()
    end
end)

-- Anti Death
local Toggle = MainTab:Toggle({
    Title = "Anti Death",
    Desc = "Te teleporta quando killers estão próximos",
    Icon = "shield",
    Type = "Checkbox",
    Default = false,
    Callback = function(val)
        _G.antiDeath = val
        if val then
            task.spawn(function()
                while _G.antiDeath do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        for _, killer in pairs(workspace:FindFirstChild("Killers") and workspace.Killers:GetChildren() or {}) do
                            if killer:FindFirstChild("HumanoidRootPart") then
                                local distance = (killer.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
                                if distance <= 18 then
                                    character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-3560,12,255))
                                end
                            end
                        end
                    end
                    task.wait(3)
                end
            end)
        end
    end
})

-- Allow Jump
local Toggle = MainTab:Toggle({
    Title = "Allow Jump",
    Desc = "Permite pular quando bloqueado",
    Icon = "arrow-up",
    Type = "Checkbox",
    Default = false,
    Callback = function(val)
        _G.allowJump = val
        if val then
            task.spawn(function()
                while _G.allowJump do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    if character and character:FindFirstChild("Humanoid") then
                        if character.Humanoid.JumpPower == 0 then
                            character.Humanoid.JumpPower = 50
                        end
                    end
                    task.wait(3)
                end
            end)
        end
    end
})

-- Infinite Stamina
local infiniteStaminaToggle = false
local oldStamina = nil

local Toggle = MainTab:Toggle({
    Title = "Infinite Stamina",
    Desc = "Stamina infinita",
    Icon = "battery",
    Type = "Checkbox",
    Default = false,
    Callback = function(Value)
        infiniteStaminaToggle = Value
        local success, sprintModule = pcall(function()
            return require(game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting)
        end)

        if success and sprintModule then
            if Value then
                oldStamina = sprintModule.Stamina
                task.spawn(function()
                    while infiniteStaminaToggle do
                        sprintModule.Stamina = sprintModule.MaxStamina
                        if sprintModule.__staminaChangedEvent then
                            sprintModule.__staminaChangedEvent:Fire()
                        end
                        task.wait()
                    end
                end)
                WindUI:Notify({
                    Title = "Infinite Stamina",
                    Content = "Stamina infinita ativada!",
                    Duration = 3,
                    Icon = "check",
                })
            else
                if oldStamina then
                    sprintModule.Stamina = oldStamina
                    if sprintModule.__staminaChangedEvent then
                        sprintModule.__staminaChangedEvent:Fire()
                    end
                end
                WindUI:Notify({
                    Title = "Infinite Stamina",
                    Content = "Stamina infinita desativada!",
                    Duration = 2,
                    Icon = "x",
                })
            end
        else
            WindUI:Notify({
                Title = "Erro",
                Content = "Não foi possível acessar o módulo de Sprint.",
                Duration = 3,
                Icon = "alert-triangle",
            })
        end
    end
})

-- Invisibility
local loopRunning, loopThread, currentAnim, lastAnim
local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://75804462760596"

local function enableNoclip()
    local localPlayer = game.Players.LocalPlayer
    if localPlayer.Character then
        for _, v in pairs(localPlayer.Character:GetChildren()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end

local Toggle = MainTab:Toggle({
    Title = "Invisible",
    Desc = "Torna você invisível (só funciona no Forsaken real)",
    Icon = "eye-off",
    Type = "Checkbox",
    Default = false,
    Callback = function(Value)
        local localPlayer = game.Players.LocalPlayer
        
        if game.PlaceId ~= 18687417158 then
            if Value then
                WindUI:Notify({
                    Title = "Aviso",
                    Content = "Use apenas no Forsaken real! Não funciona em outros jogos.",
                    Duration = 8,
                    Icon = "alert-triangle",
                })
                return
            end
        end
        
        if Value then
            WindUI:Notify({
                Title = "Aviso",
                Content = "Você ainda pode ser visto com certas habilidades!",
                Duration = 6,
                Icon = "info",
            })
            loopRunning = true

            loopThread = task.spawn(function()
                while loopRunning do
                    local hum = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") and localPlayer.Character:FindFirstChild("Humanoid")
                    if hum then
                        enableNoclip()
                    end

                    if hum then
                        local loadedAnim = hum:LoadAnimation(anim)
                        currentAnim = loadedAnim
                        loadedAnim.Looped = false
                        loadedAnim:Play()
                        loadedAnim:AdjustSpeed(0)
                        task.wait(0.1)
                        if lastAnim then
                            lastAnim:Stop()
                            lastAnim:Destroy()
                        end
                        lastAnim = currentAnim
                    else
                        currentAnim = nil
                    end
                    task.wait()
                end
            end)
        else
            loopRunning = false

            if loopThread then
                loopRunning = false
                task.cancel(loopThread)
            end

            if currentAnim then
                currentAnim:Stop()
                currentAnim = nil
            end

            local Humanoid = localPlayer.Character and (localPlayer.Character:FindFirstChildOfClass("Humanoid") or localPlayer.Character:FindFirstChildOfClass("AnimationController"))
            if Humanoid then
                for _, v in pairs(Humanoid:GetPlayingAnimationTracks()) do
                    v:AdjustSpeed(100000)
                end
                for _, v in pairs(localPlayer.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = true
                    end
                end
            end

            local animateScript = localPlayer.Character and localPlayer.Character:FindFirstChild("Animate")
            if animateScript then
                animateScript.Disabled = true
                animateScript.Disabled = false
            end
            
            WindUI:Notify({
                Title = "Invisible",
                Content = "Invisibilidade desativada!",
                Duration = 2,
                Icon = "x",
            })
        end
    end
})

-- =============================
-- ANIMATIONS TAB
-- =============================
local AnimationTab = Window:Tab({
    Title = "Animações",
    Icon = "play",
    Locked = false,
})

-- Guest 666 Animation
local Button = AnimationTab:Button({
    Title = "Guest 666 Animation",
    Desc = "Executa animação do Guest 666",
    Locked = false,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XScommunity/XXMZ/refs/heads/main/anim"))()
        WindUI:Notify({
            Title = "Animação",
            Content = "Guest 666 Animation executada!",
            Duration = 3,
            Icon = "play",
        })
    end
})

-- Mafious Dance
local Button = AnimationTab:Button({
    Title = "Mafious Dance",
    Desc = "Inicia dança Mafious",
    Locked = false,
    Callback = function()
        local localPlayer = game.Players.LocalPlayer
        local character = localPlayer.Character
        
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
            
            -- Para animações anteriores
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                track:Stop()
            end
            
            -- Cria e carrega a animação
            local anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://132946177664650"
            
            local animTrack = humanoid:LoadAnimation(anim)
            animTrack.Looped = true
            animTrack:Play()
            
            WindUI:Notify({
                Title = "Mafious Dance",
                Content = "Dança iniciada! Use 'Stop All' para parar.",
                Duration = 3,
                Icon = "play",
            })
            
            -- Guarda a referência da animação para poder parar depois
            _G.mafiousDanceTrack = animTrack
        else
            WindUI:Notify({
                Title = "Erro",
                Content = "Personagem não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
        end
    end
})

-- Noli Animation
local Button = AnimationTab:Button({
    Title = "Noli Animation",
    Desc = "Executa animação Noli",
    Locked = false,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XScommunity/MAXZZ/refs/heads/main/noli"))()
        WindUI:Notify({
            Title = "Animação",
            Content = "Noli Animation executada!",
            Duration = 3,
            Icon = "play",
        })
    end
})

-- Stop All Animations
local Button = AnimationTab:Button({
    Title = "Stop All Animations",
    Desc = "Para todas as animações",
    Locked = false,
    Callback = function()
        local localPlayer = game.Players.LocalPlayer
        local character = localPlayer.Character
        
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
            
            -- Para todas as animações
            for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                track:Stop()
            end
            
            -- Limpa referências globais
            _G.mafiousDanceTrack = nil
            
            -- Restaura animações padrão se estavam substituídas
            if _G.noliAnimationEnabled then
                _G.noliAnimationEnabled = false
            end
            
            WindUI:Notify({
                Title = "Stop Animations",
                Content = "Todas as animações foram paradas!",
                Duration = 2,
                Icon = "square",
            })
        else
            WindUI:Notify({
                Title = "Erro",
                Content = "Personagem não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
        end
    end
})

local ESPTab = Window:Tab({
    Title = "ESP",
    Icon = "eye",
    Locked = false,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Função para criar/remover ESP em uma pasta
local function manageESP(folder, state, highlightColor)
    local highlights = {} -- Tabela pra armazenar Highlights

    -- Função para adicionar ESP a um objeto
    local function addESP(object)
        if object:IsA("Model") or object:IsA("BasePart") then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = highlightColor
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = object
            highlight.Parent = object
            highlights[object] = highlight
        end
    end

    -- Função para remover ESP de um objeto
    local function removeESP(object)
        local highlight = highlights[object]
        if highlight then
            highlight:Destroy()
            highlights[object] = nil
        end
    end

    -- Limpa todos os Highlights se o estado for false
    if not state then
        for object, highlight in pairs(highlights) do
            if highlight then
                highlight:Destroy()
            end
        end
        table.clear(highlights)
        return
    end

    -- Adiciona ESP a todos os objetos atuais na pasta
    for _, object in pairs(folder:GetChildren()) do
        addESP(object)
    end

    -- Monitora novos objetos adicionados
    folder.ChildAdded:Connect(function(object)
        if state then
            addESP(object)
        end
    end)

    -- Monitora objetos removidos
    folder.ChildRemoved:Connect(function(object)
        removeESP(object)
    end)
end

-- Toggle para ESP Killer
local KillerToggle = ESPTab:Toggle({
    Title = "ESP Killer",
    Desc = "",
    Icon = "eye",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        local killersFolder = Workspace:WaitForChild("Players"):WaitForChild("Killers")
        manageESP(killersFolder, state, Color3.fromRGB(255, 0, 0)) -- Vermelho pra Killers
    end
})

-- Toggle para ESP Survivor
local SurvivorToggle = ESPTab:Toggle({
    Title = "ESP Survivor",
    Desc = "",
    Icon = "eye",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        local survivorsFolder = Workspace:WaitForChild("Players"):WaitForChild("Survivors")
        manageESP(survivorsFolder, state, Color3.fromRGB(0, 255, 0)) -- Verde pra Survivors
    end
})

local Toggle = ESPTab:Toggle({
    Title = "Generators ESP",
    Desc = "Destaca os geradores no mapa",
    Icon = "eye",
    Type = "Checkbox",
    Default = false,
    Callback = function(bool)
        _G.generators = bool
        task.spawn(function()
            while task.wait() do
                if _G.generators then
                    pcall(function()
                        if workspace:FindFirstChild("Map") then
                            local gameMap = workspace.Map
                            if gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                                for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                    if v.Name == "Generator" and not v:FindFirstChild("gen_esp") then
                                        local hl = Instance.new("Highlight", v)
                                        hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                                        hl.Name = "gen_esp"
                                        hl.FillColor = Color3.fromRGB(255, 255, 51)
                                        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
                                        hl.FillTransparency = 0.5
                                        hl.OutlineTransparency = 0
                                    elseif v:FindFirstChild("gen_esp") and v.Name == "Generator" then
                                        if v:FindFirstChild("Progress") then
                                            if v.Progress.Value >= 100 then
                                                v.gen_esp.FillColor = Color3.fromRGB(0, 255, 0)
                                            else
                                                v.gen_esp.FillColor = Color3.fromRGB(255, 255, 51)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end)
                else
                    pcall(function()
                        if workspace:FindFirstChild("Map") then
                            local gameMap = workspace.Map
                            if gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                                for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                    if v.Name == "Generator" and v:FindFirstChild("gen_esp") then
                                        v.gen_esp:Destroy()
                                    end
                                end
                            end
                        end
                    end)
                    break
                end
            end
        end)
    end
})

-- Generators Nametags
local Toggle = ESPTab:Toggle({
    Title = "Generators Nametags",
    Desc = "Mostra o progresso dos geradores",
    Icon = "tag",
    Type = "Checkbox",
    Default = false,
    Callback = function(bool)
        _G.generatorstag = bool
        task.spawn(function()
            while task.wait() do
                if _G.generatorstag then
                    pcall(function()
                        if workspace:FindFirstChild("Map") then
                            local gameMap = workspace.Map
                            if gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                                for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                    if v.Name == "Generator" and not v:FindFirstChild("nametag") then
                                        local bb = Instance.new("BillboardGui", v)
                                        bb.Size = UDim2.new(4, 0, 1, 0)
                                        bb.AlwaysOnTop = true
                                        bb.Name = "nametag"

                                        local text = Instance.new("TextLabel", bb)
                                        text.TextStrokeTransparency = 0
                                        text.Text = "Generator (" .. (v:FindFirstChild("Progress") and v.Progress.Value or 0) .. "%)"
                                        text.TextSize = 15
                                        text.BackgroundTransparency = 1
                                        text.Size = UDim2.new(1, 0, 1, 0)
                                        text.TextColor3 = Color3.fromRGB(255, 255, 255)
                                    elseif v:FindFirstChild("nametag") and v.Name == "Generator" then
                                        if v:FindFirstChild("Progress") then
                                            v.nametag.TextLabel.Text = "Generator (" .. v.Progress.Value .. "%)"
                                        end
                                    end
                                end
                            end
                        end
                    end)
                else
                    pcall(function()
                        if workspace:FindFirstChild("Map") then
                            local gameMap = workspace.Map
                            if gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                                for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                    if v.Name == "Generator" and v:FindFirstChild("nametag") then
                                        v.nametag:Destroy()
                                    end
                                end
                            end
                        end
                    end)
                    break
                end
            end
        end)
    end
})

local Toggle = ESPTab:Toggle({
    Title = "Items ESP",
    Desc = "Destaca itens no mapa",
    Icon = "package",
    Type = "Checkbox",
    Default = false,
    Callback = function(bool)
        _G.items = bool
        task.spawn(function()
            while task.wait() do
                if _G.items == true then
                    pcall(function()
                        local gameMap = workspace:FindFirstChild("Map")
                        if workspace:FindFirstChild("Map") and gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                            for _, v in pairs(gameMap.Ingame:GetChildren()) do
                                if v:IsA("Tool") and not v:FindFirstChild("tool_esp") then
                                    local hl = Instance.new("Highlight", v)
                                    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                                    hl.Name = "tool_esp"
                                    hl.FillColor = Color3.fromRGB(0, 255, 255)
                                    hl.OutlineColor = Color3.fromRGB(255, 255, 255)
                                    hl.FillTransparency = 0.3
                                    hl.OutlineTransparency = 0
                                elseif v:IsA("Tool") and v:FindFirstChild("tool_esp") then
                                    v.tool_esp.FillColor = Color3.fromRGB(0, 255, 255)
                                    v.tool_esp.OutlineTransparency = 0
                                    v.tool_esp.FillTransparency = 0.3
                                    v.tool_esp.OutlineColor = Color3.fromRGB(255, 255, 255)
                                end
                            end
                            for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                if v:IsA("Tool") and not v:FindFirstChild("tool_esp") then
                                    local hl = Instance.new("Highlight", v)
                                    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                                    hl.Name = "tool_esp"
                                    hl.FillColor = Color3.fromRGB(0, 255, 255)
                                    hl.OutlineColor = Color3.fromRGB(255, 255, 255)
                                    hl.FillTransparency = 0.3
                                    hl.OutlineTransparency = 0
                                elseif v:IsA("Tool") and v:FindFirstChild("tool_esp") then
                                    v.tool_esp.FillColor = Color3.fromRGB(0, 255, 255)
                                    v.tool_esp.OutlineTransparency = 0
                                    v.tool_esp.FillTransparency = 0.3
                                    v.tool_esp.OutlineColor = Color3.fromRGB(255, 255, 255)
                                end
                            end
                        end
                    end)
                else
                    pcall(function()
                        local gameMap = workspace:FindFirstChild("Map")
                        if workspace:FindFirstChild("Map") and gameMap:FindFirstChild("Ingame") and gameMap.Ingame:FindFirstChild("Map") then
                            for _, v in pairs(gameMap.Ingame:GetChildren()) do
                                if v:IsA("Tool") and v:FindFirstChild("tool_esp") then
                                    v.tool_esp:Destroy()
                                end
                            end
                            for _, v in pairs(gameMap.Ingame.Map:GetChildren()) do
                                if v:IsA("Tool") and v:FindFirstChild("tool_esp") then
                                    v.tool_esp:Destroy()
                                end
                            end
                        end
                    end)
                    break
                end
            end
        end)
    end
})

local Workspace = game:GetService("Workspace")

-- Função para gerenciar ESP na pasta 1x1x1Zombie
local function manageZombieESP(state)
    local highlights = {}
    local connectionAdded, connectionRemoved
    
    local function addESP(object)
        if object:IsA("Model") then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 0) -- Verde
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = object
            highlight.Parent = object
            highlights[object] = highlight
        end
    end
    
    local function removeESP(object)
        local highlight = highlights[object]
        if highlight then
            highlight:Destroy()
            highlights[object] = nil
        end
    end
    
    local success, zombieFolder = pcall(function()
        return Workspace:WaitForChild("Map", 5):WaitForChild("Ingame", 5):WaitForChild("1x1x1Zombie", 5)
    end)
    
    if not success or not zombieFolder then
        warn("Pasta 1x1x1Zombie não encontrada!")
        WindUI:Notify({
            Title = "Esp 1x1 Zombies",
            Content = "Pasta 1x1x1Zombie não encontrada!",
            Duration = 3,
            Icon = "alert-triangle",
        })
        return
    end
    
    if not state then
        for object, highlight in pairs(highlights) do
            if highlight then
                highlight:Destroy()
            end
        end
        table.clear(highlights)
        if connectionAdded then connectionAdded:Disconnect() end
        if connectionRemoved then connectionRemoved:Disconnect() end
        return
    end
    
    for _, object in pairs(zombieFolder:GetChildren()) do
        addESP(object)
    end
    
    connectionAdded = zombieFolder.ChildAdded:Connect(function(object)
        if state then
            addESP(object)
        end
    end)
    
    connectionRemoved = zombieFolder.ChildRemoved:Connect(function(object)
        removeESP(object)
    end)
end

-- Toggle para ESP 1x1 Zombies
local ZombieToggle = ESPTab:Toggle({
    Title = "Esp 1x1 Zombies",
    Desc = "Destaca zombies em Workspace.Map.Ingame.1x1x1Zombie",
    Icon = "eye",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        manageZombieESP(state)
        WindUI:Notify({
            Title = "Esp 1x1 Zombies",
            Content = state and "ESP para zombies ativado!" or "ESP para zombies desativado!",
            Duration = 2,
            Icon = state and "check" or "x",
        })
    end
})

local StatsTab = Window:Tab({
    Title = "Info",
    Icon = "user",
    Locked = false,
})

local playerParagraphs = {} -- Tabela para armazenar os paragraphs criados e conexões

local function clearParagraphs()
    for _, info in pairs(playerParagraphs) do
        if info.para then
            pcall(function()
                info.para:Destroy()
            end)
        end
        if info.connection then
            info.connection:Disconnect()
        end
    end
    playerParagraphs = {}
end

local PlayerNameInput = StatsTab:Input({
    Title = "Nome do Jogador",
    Desc = "Digite o nome do jogador para ver os status",
    Placeholder = "Nome do jogador",
    Locked = false,
    Callback = function(name)
        clearParagraphs() -- Limpa os paragraphs anteriores

        local player = Players:FindFirstChild(name)
        if not player then
            WindUI:Notify({
                Title = "Erro",
                Content = "Jogador não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        local playerData = player:FindFirstChild("PlayerData")
        if not playerData then
            WindUI:Notify({
                Title = "Erro",
                Content = "PlayerData não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        local stats = playerData:FindFirstChild("Stats")
        if not stats then
            WindUI:Notify({
                Title = "Erro",
                Content = "Stats não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        local killerStats = stats:FindFirstChild("KillerStats")
        local survivorStats = stats:FindFirstChild("SurvivorStats")
        if not killerStats or not survivorStats then
            WindUI:Notify({
                Title = "Erro",
                Content = "KillerStats ou SurvivorStats não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        -- Paragraph para Killer Stats header
        StatsTab:Paragraph({
            Title = "Killer Stats de " .. name,
            Desc = "Status do jogador como Killer",
            Color = "Green",
            Locked = false,
        })

        -- Cria paragraphs para cada stat em KillerStats
        for _, stat in ipairs(killerStats:GetChildren()) do
            if stat:IsA("NumberValue") or stat:IsA("IntValue") or stat:IsA("StringValue") then
                local para = StatsTab:Paragraph({
                    Title = stat.Name .. ": " .. tostring(stat.Value),
                    Desc = "",
                    Color = "Green",
                    Locked = false,
                })
                local connection = stat.Changed:Connect(function(newValue)
                    para:SetTitle(stat.Name .. ": " .. tostring(newValue))
                end)
                table.insert(playerParagraphs, {para = para, connection = connection})
            end
        end

        -- Paragraph para Survivor Stats header
        StatsTab:Paragraph({
            Title = "Survivor Stats de " .. name,
            Desc = "Status do jogador como Survivor",
            Color = "Green",
            Locked = false,
        })

        -- Cria paragraphs para cada stat em SurvivorStats
        for _, stat in ipairs(survivorStats:GetChildren()) do
            if stat:IsA("NumberValue") or stat:IsA("IntValue") or stat:IsA("StringValue") then
                local para = StatsTab:Paragraph({
                    Title = stat.Name .. ": " .. tostring(stat.Value),
                    Desc = "",
                    Color = "Green",
                    Locked = false,
                })
                local connection = stat.Changed:Connect(function(newValue)
                    para:SetTitle(stat.Name .. ": " .. tostring(newValue))
                end)
                table.insert(playerParagraphs, {para = para, connection = connection})
            end
        end

        local equipped = playerData:FindFirstChild("Equipped")
        if not equipped then
            WindUI:Notify({
                Title = "Erro",
                Content = "Equipped não encontrado!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        local equippedEmotes = equipped:FindFirstChild("Emotes")
        local equippedKiller = equipped:FindFirstChild("Killer")
        local equippedSurvivor = equipped:FindFirstChild("Survivor")
        if not equippedEmotes or not equippedKiller or not equippedSurvivor then
            WindUI:Notify({
                Title = "Erro",
                Content = "Emotes, Killer ou Survivor não encontrado em Equipped!",
                Duration = 3,
                Icon = "alert-triangle",
            })
            return
        end

        -- Paragraph para Equipped Emotes header
        StatsTab:Paragraph({
            Title = "Equipped Emotes de " .. name,
            Desc = "Emotes equipados do jogador",
            Color = "Green",
            Locked = false,
        })

        -- Processa e exibe Emotes (assumindo StringValue com valores separados por "|")
        if equippedEmotes:IsA("StringValue") then
            local emotes = {}
            for emote in string.gmatch(equippedEmotes.Value, "[^|]+") do
                if emote ~= "nil" then
                    table.insert(emotes, emote)
                end
            end
            local emotesStr = table.concat(emotes, ", ")
            local para = StatsTab:Paragraph({
                Title = "Emotes: " .. (emotesStr ~= "" and emotesStr or "Nenhum emote equipado"),
                Desc = "",
                Color = "Green",
                Locked = false,
            })
            local connection = equippedEmotes.Changed:Connect(function(newValue)
                local updatedEmotes = {}
                for emote in string.gmatch(newValue, "[^|]+") do
                    if emote ~= "nil" then
                        table.insert(updatedEmotes, emote)
                    end
                end
                local updatedStr = table.concat(updatedEmotes, ", ")
                para:SetTitle("Emotes: " .. (updatedStr ~= "" and updatedStr or "Nenhum emote equipado"))
            end)
            table.insert(playerParagraphs, {para = para, connection = connection})
        end

        -- Paragraph para Equipped Killer header
        StatsTab:Paragraph({
            Title = "Equipped Killer de " .. name,
            Desc = "Killer equipado do jogador",
            Color = "Green",
            Locked = false,
        })

        -- Cria paragraphs para cada item em Equipped.Killer (assumindo Folder ou valores)
        for _, item in ipairs(equippedKiller:GetChildren()) do
            if item:IsA("NumberValue") or item:IsA("IntValue") or item:IsA("StringValue") then
                local para = StatsTab:Paragraph({
                    Title = item.Name .. ": " .. tostring(item.Value),
                    Desc = "",
                    Color = "Green",
                    Locked = false,
                })
                local connection = item.Changed:Connect(function(newValue)
                    para:SetTitle(item.Name .. ": " .. tostring(newValue))
                end)
                table.insert(playerParagraphs, {para = para, connection = connection})
            end
        end

        -- Paragraph para Equipped Survivor header
        StatsTab:Paragraph({
            Title = "Equipped Survivor de " .. name,
            Desc = "Survivor equipado do jogador",
            Color = "Green",
            Locked = false,
        })

        -- Cria paragraphs para cada item em Equipped.Survivor (assumindo Folder ou valores)
        for _, item in ipairs(equippedSurvivor:GetChildren()) do
            if item:IsA("NumberValue") or item:IsA("IntValue") or item:IsA("StringValue") then
                local para = StatsTab:Paragraph({
                    Title = item.Name .. ": " .. tostring(item.Value),
                    Desc = "",
                    Color = "Green",
                    Locked = false,
                })
                local connection = item.Changed:Connect(function(newValue)
                    para:SetTitle(item.Name .. ": " .. tostring(newValue))
                end)
                table.insert(playerParagraphs, {para = para, connection = connection})
            end
        end

        WindUI:Notify({
            Title = "Status Carregados",
            Content = "Status do jogador " .. name .. " carregados com sucesso!",
            Duration = 3,
            Icon = "check",
        })
    end
})

-- =============================
-- CONFIGURAÇÕES TAB
-- =============================
local ConfigTab = Window:Tab({
    Title = "Configurações",
    Icon = "settings",
    Locked = false,
})

local Keybind = ConfigTab:Keybind({
    Title = "Keybind",
    Desc = "Keybind para abrir/fechar a UI",
    Value = "K",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
        WindUI:Notify({
            Title = "Keybind",
            Content = "Keybind alterada para: " .. v,
            Duration = 2,
            Icon = "keyboard",
        })
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Toggle para deletar ragdolls
local RagdollToggle = ConfigTab:Toggle({
    Title = "FPS Boost - Ragdolls",
    Desc = "Deleta todos os ragdolls",
    Icon = "zap",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        local ragdollFolder = Workspace:WaitForChild("Ragdolls")
        
        if state then
            -- Deleta todos os ragdolls
            for _, ragdoll in pairs(ragdollFolder:GetChildren()) do
                ragdoll:Destroy()
            end
            -- Monitora novos ragdolls pra deletar enquanto ativado
            local connection
            connection = ragdollFolder.ChildAdded:Connect(function(ragdoll)
                if state then
                    ragdoll:Destroy()
                else
                    connection:Disconnect()
                end
            end)
        end
    end
})

-- Toggle para desativar efeitos visuais
local EffectsToggle = ConfigTab:Toggle({
    Title = "FPS Boost - Efeitos Visuais",
    Desc = "Desativa efeitos",
    Icon = "zap",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        local function toggleEffects(object)
            if object:IsA("ParticleEmitter") or object:IsA("Smoke") or object:IsA("Fire") or object:IsA("Sparkles") then
                object.Enabled = not state
            end
        end
        
        -- Percorre todos os objetos no workspace
        for _, obj in pairs(Workspace:GetDescendants()) do
            toggleEffects(obj)
        end
        
        -- Monitora novos objetos adicionados
        local connection
        connection = Workspace.DescendantAdded:Connect(function(obj)
            if state then
                toggleEffects(obj)
            end
        end)
        
        -- Desconecta monitoramento quando desativado
        if not state then
            connection:Disconnect()
        end
    end
})
