local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Configuração da WindUI
WindUI:Popup({
    Title = "XXMZ Hub v2.0",
    Content = "Hub para Forsaken. Caso encontre erros, entre em nosso discord e avise.",
    Buttons = {
        {
            Title = "Discord",
            Callback = function()
                setclipboard("https://discord.gg/YXJ2xaEwP2")
                WindUI:Notify({
                    Title = "Convite copiado",
                    Content = "O convite foi copiado para sua área de transferência!",
                    Duration = 3,
                    Icon = "message-circle",
                })
            end
        },
        {
            Title = "Fechar",
            Callback = function()
                print("Popup fechado")
            end
        }
    }
})

local Window = WindUI:CreateWindow({
    Title = "☑️ XXMZ Hub | FREE ADMIN",
    Icon = "door-open",
    Author = "discord.gg/YXJ2xaEwP2",
    Folder = "XXMZHUBFORSAKEN",
    Size = UDim2.fromOffset(600, 480),
    MinSize = Vector2.new(580, 370),
    MaxSize = Vector2.new(900, 600),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    BackgroundImageTransparency = 0.42,
    HideSearchBar = false,
    ScrollBarEnabled = true,
    Background = "rbxassetid://106924593304955",
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        end,
    },
    KeySystem = { 
        Key = { "xxmz25" },
        Note = "Resgate a key em nosso discord .gg/YXJ2xaEwP2",
        Thumbnail = {
            Image = "rbxassetid://89646996763231",
            Title = "XXMZ Hub",
        },
        URL = "https://discord.gg/YXJ2xaEwP2",
        SaveKey = true,
    },
})

local MainTab = Window:Tab({
    Title = "Principal",
    Icon = "house",
    Locked = false,
})

-- Estado do toggle
local spamPollToggle = false

-- Função pra executar a enquete
local function executePoll()
    local retrievePollData, executePoll
    local success, err = pcall(function()
        retrievePollData = ReplicatedStorage:WaitForChild("HDAdminClient", 5):WaitForChild("Signals", 5):WaitForChild("RetrievePollData", 5)
        executePoll = ReplicatedStorage:WaitForChild("HDAdminClient", 5):WaitForChild("Signals", 5):WaitForChild("ExecutePoll", 5)
    end)
    if not success or not retrievePollData or not executePoll then
        WindUI:Notify({
            Title = "Spam Poll",
            Content = "Erro ao encontrar RemoteFunctions: " .. (err or "Desconhecido"),
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Erro ao encontrar RemoteFunctions:", err)
        return false
    end

    local args = {
        {
            ShowResultsTo = "Everyone",
            VoteTime = "20",
            Question = "GAME HACKED BY XXMZ",
            Answers = {
                "HAHAHAHAHA",
                "HAHAHAHAHAHA",
                "HAHAHAHAHAHA"
            },
            PlayerArg = "all",
            Server = "Current"
        }
    }
    local success, result = pcall(function()
        retrievePollData:InvokeServer(unpack(args))
    end)
    if not success then
        WindUI:Notify({
            Title = "Spam Poll",
            Content = "Erro ao invocar RetrievePollData: " .. result,
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Erro ao invocar RetrievePollData:", result)
        return false
    end

    task.wait(0.01) -- Intervalo rápido de 0.01s

    local success, result = pcall(function()
        executePoll:InvokeServer()
    end)
    if not success then
        WindUI:Notify({
            Title = "Spam Poll",
            Content = "Erro ao invocar ExecutePoll: " .. result,
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Erro ao invocar ExecutePoll:", result)
        return false
    end

    return true
end

-- Função pra iniciar o spam da enquete
local function startSpamPoll()
    task.spawn(function()
        local attemptCount = 0
        while spamPollToggle do
            if executePoll() then
                attemptCount = attemptCount + 1
                if attemptCount % 100 == 0 then
                    WindUI:Notify({
                        Title = "Spam Poll",
                        Content = "Spam ativo! Tentativas: " .. attemptCount,
                        Duration = 2,
                        Icon = "check"
                    })
                    print("Spam Poll - Tentativas:", attemptCount)
                end
            else
                spamPollToggle = false
                MainTab:Find("SpamPollToggle"):Set(false)
                break
            end
            task.wait(0.01) -- Intervalo rápido de 0.01s
        end
    end)
end

-- Toggle na WindUI
local Toggle = MainTab:Toggle({
    Title = "Spam Poll",
    Desc = "Spamma enquete com GAME HACKED BY XXMZ",
    Icon = "vote",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        spamPollToggle = state
        if state then
            if executePoll() then
                startSpamPoll()
                WindUI:Notify({
                    Title = "Spam Poll",
                    Content = "Spam de enquete ativado!",
                    Duration = 3,
                    Icon = "check"
                })
                print("Spam Poll ativado")
            else
                spamPollToggle = false
                Toggle:Set(false)
                WindUI:Notify({
                    Title = "Spam Poll",
                    Content = "Falha ao iniciar spam!",
                    Duration = 3,
                    Icon = "alert-triangle"
                })
                print("Falha ao iniciar Spam Poll")
            end
        else
            spamPollToggle = false
            WindUI:Notify({
                Title = "Spam Poll",
                Content = "Spam de enquete desativado!",
                Duration = 2,
                Icon = "x"
            })
            print("Spam Poll desativado")
        end
    end
})

-- Função pra coletar nomes dos jogadores e formatar o comando
local function executeCommandAll(inputCommand)
    if not inputCommand or inputCommand == "" then
        WindUI:Notify({
            Title = "Command All",
            Content = "Digite um comando válido!",
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Command All: Comando inválido")
        return false
    end

    local playerList = Players:GetPlayers()
    if #playerList == 0 then
        WindUI:Notify({
            Title = "Command All",
            Content = "Nenhum jogador encontrado no servidor!",
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Command All: Nenhum jogador encontrado")
        return false
    end

    local success, requestCommand = pcall(function()
        return ReplicatedStorage:WaitForChild("HDAdminClient", 5):WaitForChild("Signals", 5):WaitForChild("RequestCommand", 5)
    end)
    if not success or not requestCommand then
        WindUI:Notify({
            Title = "Command All",
            Content = "RemoteFunction 'RequestCommand' não encontrado!",
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Command All: RemoteFunction 'RequestCommand' não encontrado")
        return false
    end

    local commandString = ""
    for i, player in ipairs(playerList) do
        commandString = commandString .. inputCommand .. " " .. player.Name
        if i < #playerList then
            commandString = commandString .. " "
        end
    end

    local args = { commandString }
    local success, result = pcall(function()
        requestCommand:InvokeServer(unpack(args))
    end)
    if not success then
        WindUI:Notify({
            Title = "Command All",
            Content = "Erro ao executar comando: " .. result,
            Duration = 3,
            Icon = "alert-triangle"
        })
        print("Command All: Erro ao executar comando:", result)
        return false
    end

    WindUI:Notify({
        Title = "Command All",
        Content = "Comando executado: " .. commandString,
        Duration = 5,
        Icon = "check"
    })
    print("Command All: Executado:", commandString)
    return true
end

-- Input na WindUI
local Input = MainTab:Input({
    Title = "Command All",
    Desc = "Digite um comando para executar em todos os jogadores (ex.: :poop)",
    Icon = "terminal",
    Placeholder = ":poop",
    Default = "",
    Callback = function(value)
        executeCommandAll(value)
    end
})

local ConfigTab = Window:Tab({
    Title = "Configurações",
    Icon = "settings",
    Locked = false,
})

local Keybind = ConfigTab:Keybind({
    Title = "Keybind",
    Desc = "Keybind para abrir/fechar a UI",
    Value = "K",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
        WindUI:Notify({
            Title = "Keybind",
            Content = "Keybind alterada para: " .. v,
            Duration = 2,
            Icon = "keyboard",
        })
    end
})
